@page "/"
@using System

<h3 class="text-center">Carbonacci, the spunded beer carbonation calculator</h3>

<EditForm Model="@parameters" OnValidSubmit="CalculateCarbonation">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group text-center">
        <label for="beerType">Select fermentation type:</label>
        <InputSelect @bind-Value="parameters.BeerType" id="beerType" class="form-control" @onchange="OnBeerTypeChanged">
            <option value="">Select...</option>
            @*<option value="Uncarbonated">Uncarbonated (Force carbonation chart)</option>*@
            <option value="PressureFermented">Pressure Fermented (Henry's law)</option>
        </InputSelect>
    </div>

    <div class="form-group text-center">
        <label for="volume">Liquid Volume (L):</label>
        <InputNumber @bind-Value="parameters.Volume" id="volume" class="form-control" />
    </div>

    <div class="form-group text-center">
        <label for="temperature">Max Fermentation Temperature (°C):</label>
        <InputNumber @bind-Value="parameters.Temperature" id="temperature" class="form-control" />
    </div>

    <div class="form-group text-center">
        <label for="desiredCarbonation">Desired Carbonation Vol (0.0-4.0):</label>
        <InputNumber @bind-Value="parameters.DesiredCarbonation" id="desiredCarbonation" class="form-control" />
    </div>

    @if (parameters.BeerType == "PressureFermented")
    {
        <div class="form-group text-center">
            <label for="fermentationPressure">Spunding Pressure (bar):</label>
            <InputNumber @bind-Value="parameters.FermentationPressure" id="fermentationPressure" class="form-control" />
        </div>
    }
    
    <button type="submit" class="btn btn-primary d-block mx-auto" style="margin-top: 20px;">Calculate</button>

</EditForm>

@if (calculationResult != null)
{
    <div class="text-center" style="margin-top: 20px;">
        <h4>Results</h4>
        <p><strong>Total amount of CO2 weight required for desired carbonation (Simple):</strong> @calculationResult.SimpleCO2gNeeded.ToString("F1") gram</p>
        <p><strong>Existing CO2 weight in the beer (Henry's law):</strong> @calculationResult.ExistingCO2g.ToString("F1") gram</p>
        <p><strong>Needed CO2 weight for desired carbonation:</strong> @calculationResult.MissingCO2g.ToString("F1") gram</p>
        @*<p><strong>Pressure to reach equilibrium at desired carbonation volume:</strong> @calculationResult.Pressure bar</p>*@
    </div>
}

@code {
    private CarbonationParameters parameters = new CarbonationParameters();
    private CarbonationResult calculationResult;

    private void OnBeerTypeChanged(ChangeEventArgs e)
    {
        parameters.FermentationPressure = 0;
    }

    private void CalculateCarbonation()
    {
        if (parameters.BeerType == "Uncarbonated")
        {
            calculationResult = CarbonationCalculator.CalculateStandardCarbonation(parameters);
        }
        else if (parameters.BeerType == "PressureFermented")
        {
            calculationResult = CarbonationCalculator.CalculatePressureFermentation(parameters);
        }
    }

    public class CarbonationParameters
    {
        public string BeerType { get; set; }
        public double Volume { get; set; }
        public double Temperature { get; set; }
        public double DesiredCarbonation { get; set; }
        public double FermentationPressure { get; set; }
    }

    public class CarbonationResult
    {
        public double ExistingCO2g { get; set; }
        public double MissingCO2g { get; set; }
        public double Pressure { get; set; }
        public double CarbonationTime { get; set; }

        public double SimpleCO2gNeeded { get; set; }

    }

    public static class CarbonationCalculator
    {
        private const double k0H = 3.3e-2;               // Henrys constant at 298.15 K i mol/(L·bar)
        private const double TempDependence = 2400;     // Henry's temperaturedependence constant (K)
        private const double MolarMassCO2 = 44.01;       // g/mol
        private const double MolarVolumeSTP = 22.4;      // L/mol

        // TODO add a basic forced carbonation chart here
        public static CarbonationResult CalculateStandardCarbonation(CarbonationParameters parameters)
        {
            var carbonationTable = new Dictionary<int, double>
            {
                { 10, 2.0 },
                { 12, 2.2 },
                { 15, 2.5 },
                { 18, 2.8 },
                { 20, 3.0 }
            };

            double pressure = carbonationTable.ContainsKey((int)parameters.Temperature)
                ? carbonationTable[(int)parameters.Temperature]
                : 2.5;  // Default value

            double carbonationTime = 7; // TODO

            return new CarbonationResult
            {
                Pressure = pressure,
                CarbonationTime = carbonationTime
            };
        }

        public static CarbonationResult CalculatePressureFermentation(CarbonationParameters parameters)
        {
            double kH = CalculateHenryConstant(k0H, TempDependence, parameters.Temperature);
            double CO2gNeeded = CO2simpleWeightCalculator(parameters.Volume, parameters.DesiredCarbonation);


            // Calculate existing CO2 in the beer using Henry's law
            double existingMolPerL = kH * parameters.FermentationPressure;
            double existingMolTotal = existingMolPerL * parameters.Volume;
            double existingCO2gUnconverted = existingMolTotal * MolarMassCO2;
            double existingCO2g = ConvertToSTP(existingCO2gUnconverted, parameters.Temperature);

            // Desired CO2 mass in grams for the desired carbonation level
            double desiredCO2g = CO2VolumeConverter.ConvertVolumesToCO2Mass(parameters.DesiredCarbonation, parameters.Volume);

            // Missing CO2 mass in grams
            double missingCO2g = CO2gNeeded - existingCO2g;
            if (missingCO2g < 0) missingCO2g = 0;

            // TODO: Calculate the pressure needed to reach the desired carbonation level
            double requiredPressure = CalculateEquilibriumPressure(desiredCO2g, parameters.Volume, parameters.Temperature, k0H, TempDependence);

            double carbonationTime = 7; // Placeholder

            return new CarbonationResult
            {
                ExistingCO2g = existingCO2g,
                MissingCO2g = missingCO2g,
                Pressure = requiredPressure,
                CarbonationTime = carbonationTime,
                SimpleCO2gNeeded = CO2gNeeded
            };
        }

        public static double CalculateHenryConstant(double k0H, double temperatureDependence, double temperatureCelsius)
        {
            double temperatureK = temperatureCelsius + 273.15;
            double T0 = 298.15;
            return k0H * Math.Exp(temperatureDependence * (1.0 / temperatureK - 1.0 / T0));
        }

        public static double CalculateEquilibriumPressure(double desiredCO2Mass, double volume, double temperatureCelsius, double k0H, double temperatureDependence)
        {
            double molCO2 = desiredCO2Mass / MolarMassCO2;
            double concentration = molCO2 / volume;
            double kH = CalculateHenryConstant(k0H, temperatureDependence, temperatureCelsius);
            return concentration / kH;
        }

        public static double CO2simpleWeightCalculator(double volume, double DesiredCarbonation)
        {
            // TODO: Implement a more accurate calculation for CO2 weight based on the desired carbonation level.
            double standardCO2weight = 1.964;
            double desiredCO2Mass = volume * DesiredCarbonation * standardCO2weight;
            return desiredCO2Mass;
        }

        public static double ConvertToSTP(double co2Weight, double temperatureCelsius)
        {
    // Constants for STP (Standard Temperature and Pressure)
          const double stpTemperatureK = 273.15; // 0°C in Kelvin
          const double stpPressureATM = 1.0; // 1 atm

          // Convert the given temperature to Kelvin
          double temperatureK = temperatureCelsius + 273.15;

         // Use the Ideal Gas Law relationship to adjust for temperature (since pressure is proportional to temperature in this case)
         // co2Weight is the weight of CO2 at the given temperature in grams

          // Convert the weight of CO2 at the given temperature to the equivalent weight at STP
          double co2WeightAtSTP = co2Weight * (stpTemperatureK / temperatureK);

          return co2WeightAtSTP;
        }

        public class CO2VolumeConverter
        {
            public static double ConvertVolumesToCO2Mass(double desiredVolumes, double beerVolumeLiters)
            {
                double totalCO2Liters = desiredVolumes * beerVolumeLiters;
                double molCO2 = totalCO2Liters / MolarVolumeSTP;
                double gramsCO2 = molCO2 * MolarMassCO2;
                return gramsCO2;
            }
        }
            
    }
}
